{"version":3,"sources":["logo.svg","Cell.js","Board.js","App.js","serviceWorker.js","index.js","boardData.js"],"names":["module","exports","pieceImages","rook_white","rook_black","pawn_white","pawn_black","knight_white","knight_black","bishop_white","bishop_black","queen_white","queen_black","king_white","king_black","CellDiv","styled","div","props","selection","from","index","Cell","onClick","src","name","replace","BoardDiv","Board","React","useState","to","setSelection","console","log","cells","data","map","cellname","idx","key","cellprops","window","parent","postMessage","type","move","AppDiv","MessageDiv","App","setData","message","setMessage","useEffect","addEventListener","msg","board","messages","length","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3c5bd5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst pieceImages = {\n\trook_white: \"image://v1/4bc52e_d51d5b998211419b897e2640a89e1673~mv2.png/45_45/rook_white.png\",\n\trook_black: \"image://v1/4bc52e_96400be7e1ad4ef088153fc740d27bbf~mv2.png/45_45/rook_black.png\",\n\tpawn_white: \"image://v1/4bc52e_e64495675a074dc8a29112e7193b598b~mv2.png/45_45/pawn_white.png\",\n pawn_black: \"image://v1/4bc52e_4ef97a0ac7c84fbb964d7b750831c2b6~mv2.png/45_45/pawn_black.png\",\n\tknight_white: \"image://v1/4bc52e_61b911077ced4793a045f865fb4f03fc~mv2.png/45_45/knight_white.png\",\n\tknight_black: \"image://v1/4bc52e_cde6554283d841ff92efc1387b91b0f2~mv2.png/45_45/knight_black.png\",\n\tbishop_white: \"image://v1/4bc52e_42a9d5a4ba70472d9f8574ec9631e9cf~mv2.png/45_45/bishop_white.png\",\n\tbishop_black: \"image://v1/4bc52e_73d298244f294c11aa76163720f7cb51~mv2.png/45_45/bishop_black.png\",\n\tqueen_white: \"image://v1/4bc52e_a36c146ecb654dbab53c13c40adc5bff~mv2.png/45_45/queen_white.png\",\n\tqueen_black: \"image://v1/4bc52e_2df8702d1b2f456a824fd259821d13c4~mv2.png/45_45/queen_black.png\",\n\tking_white: \"image://v1/4bc52e_19d50b42ffb84435809a9288462b819d~mv2.png/45_45/king_white.png\",\n king_black: \"image://v1/4bc52e_d236fec85c954a3aa4bf3c5e2d6c6047~mv2.png/45_45/king_black.png\",\n}\n\n\nconst imgurl = name => pieceImages[name] && pieceImages[name]\n .replace('image://v1/', 'https://static.wixstatic.com/media/')\n .replace(`/45_45/${name}.png`,'');\n\n\nconst CellDiv = styled.div`\n   display:flex;\n   min-height: 0px;\n   width:12.5%;\n   height:12.5%;\n   outline:1px solid ${props=>props.selection && (props.selection.from === props.index ? 'red' : 'black')};\n`;\n\nCell.propTypes = {\n   name: PropTypes.string,\n   index: PropTypes.number,\n   selection: PropTypes.object\n};\n\nfunction Cell(props) {\n   return (\n      <CellDiv {...props} onClick={()=>props.onClick(props)}>\n        <img src={imgurl(props.name)} />\n      </CellDiv>\n   );\n}\n\nexport default Cell;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Cell from './Cell';\n\nconst BoardDiv = styled.div`\n   max-width:320px;\n   min-width:320px;\n   max-height:320px;\n   background:grey;\n   display:flex;\n   flex-wrap:wrap;\n   align-content:center;\n   flex-direction: row;\n   flex:1;\n   min-height: 0px;\n`;\n\nBoard.propTypes = {\n   data: PropTypes.array,\n};\n\nfunction Board(props) {\n   let [selection, setSelection] = React.useState({from:null, to:null});\n   console.log('rendering Board', selection);\n\n   const cells = props.data.map((cellname, idx) => {\n      return <Cell key={idx} index={idx} \n         name={cellname} selection={selection} \n         onClick={\n            (cellprops) => {\n               console.log('click cell', cellprops, selection);\n               if (!selection.from && cellprops.name) { // start move a piece\n                  setSelection({ from: cellprops.index, to: null });\n               }\n               else if (selection.from === cellprops.index) { // unselect\n                  setSelection({ from: null, to: null });\n               }\n               else {\n                  console.log('move piece!',\n                     cellprops.name, selection.from, cellprops.index);\n                  window.parent.postMessage({\n                     type: 'move',\n                     move: { ...selection, to: cellprops.index }\n                  }, '*');\n                  setSelection({ from: null, to: null });\n               }\n            }\n         } />\n   })\n\n   return (\n      <BoardDiv>\n         {cells}\n      </BoardDiv>\n   );\n}\n\nexport default Board;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styled from 'styled-components';\nimport Board from './Board'\n\nconst AppDiv = styled.div`\n   display:flex;\n`;\n\nconst MessageDiv = styled.div`\n\n`;\n\nfunction App(props) {\n  let [data, setData] = React.useState(props.data);\n  let [message, setMessage] = React.useState('');\n\n  React.useEffect(()=>{\n    window.addEventListener(\"message\", (msg) => {\n      if (msg.data && msg.data.board) {\n          setData(data => ({...msg.data}));\n      }\n      if (msg.data && msg.data.message) {\n        setMessage(msg.data.message);\n      }\n    }, false);    \n  },[]);\n\n  if (!data) {\n    return null;\n  }\n\n  console.log('rendering app...', data.messages && data.messages.length);\n\n  return (\n    <AppDiv>\n      <Board data={data.board} />\n      <MessageDiv>{message}</MessageDiv>  \n    </AppDiv>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport boardData from './boardData';\n\nReactDOM.render(<App data={boardData} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n board: [\"rook_black\", \"knight_black\", \"bishop_black\", \"queen_black\", \"king_black\", \"bishop_black\", null, \"rook_black\", \"pawn_black\", \"pawn_black\", \"pawn_black\", \"pawn_black\", \"pawn_black\", \"pawn_black\", \"pawn_black\", \"pawn_black\", null, null, null, null, null, \"knight_black\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, \"pawn_white\", \"pawn_white\", null, null, null, null, null, null, null, null, \"pawn_white\", null, \"pawn_white\", \"pawn_white\", \"pawn_white\", \"pawn_white\", null, null, null, \"pawn_white\", \"rook_white\", \"knight_white\", \"bishop_white\", \"queen_white\", \"king_white\", \"bishop_white\", \"knight_white\", \"rook_white\"]\n}"],"sourceRoot":""}